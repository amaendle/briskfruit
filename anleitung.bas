' #############################################################################
' #############################################################################
'
' Deutsch:
' =========
' Dieser Quellcode ist von Folke Rinneberg
' Webseite: http://www.Rinneberg.de/programming/gfa.htm
' E-Mail:   Folke_R@gmx.de
'
' Du kannst diesen Quellcode frei nutzen, Veraendern und Erweitern.
' Es waehre nett, wenn du mir mitteilen wuerdest, wenn du diesen Quellcode
' benutzt/veraenderst oder erweiterst. Verbesserungen/Erweiterung wuerde 
' ich vielleicht gerne uebernehmen, Nutzung wuerde ich vielleicht gerne an
' dieser Stelle verlinken.
'
'
' English:
' =========
' This source code was written by Folke Rinneberg
' Web Site: http://www.Rinneberg.de/programming/gfa.htm#english
' e-mail:  Folke_R@gmx.de
'
' You are free to use, modify and extend this source code.
' It would be nice, if you contact me (e.g. by e-mail) when you 
' use/modify or extend this source code. Perhaps I would 
' put Improvements or extensions to this web site.
' Usage of this source code may be linked here.
'
' #############################################################################
' #############################################################################
'
'
PRINT "Working Directory:"
PRINT DIR$(0)
PRINT ENV$("PWD")
PRINT param$(1) 
CHDIR "C:/Users/maendle.FASERINSTITUT/OneDrive/workingr/BASIC/brisk/"
'CHDIR "C:/Users/andem/OneDrive/workingr/BASIC/brisk/"
PRINT DIR$(0)
Dim Anleitung$(38)
 bitswap()=[0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff]
 
Graphmode 1             !Grafikmodus=Repleace
Randomize Timer         !Zufallsgenerator mit Timer
Deffill 1,2,1             !F"+Chr$(129)+"llmuster=schwarz
  black=COLOR_RGB(0,0,0)
  white=COLOR_RGB(1,1,1)
COLOR black,white
'SETFONT "LARGE"
clearw ! Pbox 0,0,639,399        !Bildschirm=schwarz
@lese_anleitung
Vsync
@Werte
SIZEW 1,640,800
@Vorspann
END
PROCEDURE lese_anleitung
  GPrint At(13,27);"Anleitung wird eingelesen!"
  showpage
  For I%=1 To 38 
    Anleitung$(I%-1)=""
  Next I%
  For I%=1 To 38 
    ' Anzeigebalken
	'Deffill 1,2,5
    Pbox 100,300,100-1+(I%/38)*380,300+17 
	showpage
	
	A$=Right$("0"+Str$(I%),2)
	'Void$="BINFO\INFO__"+A$+".PIC"
	Void$="B___INFO\INFO__"+A$+".PIC"
	print "lese:",Void$
	flen%=0
    If Exist(Void$)
      Open "i",#1,Void$
	    flen = Lof(#1)
        'Anleitung$(I%-1)=@loadpic640$(flen) !32000
		Anleitung$(I%-1)=@load_compressed_pic$(flen)
      Close
    Else
      Fehler$=Right$(Void$,12)+" ist nicht auf der Diskette!"
	  print Fehler$
    Endif
  Next I%
  RETURN
ENDFUNC
Procedure Werte
  yellow=COLOR_RGB(1,1,0)
  blue=COLOR_RGB(0,0,1)
  black=COLOR_RGB(0,0,0)
  white=COLOR_RGB(1,1,1)
 
  ' Hier werden wichtige Anfangswerte gesetzt!
  Return
ENDFUNC
Procedure Vorspann
  CLEARW
  For I%=1 To 38 step 2
    A$=Right$("0"+Str$(I%),2)
    CLEARW
	COLOR  black,white
	@put_pic640(0,0,640,Anleitung$(I%-1))
	@put_pic640(0,400,640,Anleitung$(I%))
	showpage
	print "speichere:","INFO__"+A$+".BMP"
	SAVEWINDOW "INFO__"+A$+".BMP"
	pause 1
  Next I%
  Return
ENDFUNC
FUNCTION loadpic640$(n%)
    'bitswap()=[0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff]

	LOCAL a$, b$, t% !, wd%, wdX%, ht% !, frows%, arest%, thisbytepxls%
	
	' HÃ¶he und Breite ermitteln
	a$=Input$(#1,n%) 
	'wd%=640
    'wdX% = wd%
    'IF mod(wd%,16)>0 
	'  wdX%=wdX%+16-mod(wd%,16) !gerade anzahl von bytes?
	'ENDIF
    'ht%=(n%*8) / 640
	
	' Bilddaten speichern
	b$=""
	
	FOR t%= 1 TO n%
      b$ = b$ + LEFT$(MKI$(bitswap(CVI(mid$(a$,t%)))))
    NEXT t%
	RETURN b$
ENDFUNC
FUNCTION load_compressed_pic$(n)
	LOCAL a$, b$, t% !, wd%, wdX%, ht% !, frows%, arest%, thisbytepxls%
	
	a$=Input$(#1,n)
	
	b$=""
	
	FOR t%= 1 TO n
	  IF CVI(mid$(a$,t%))=$EA
	    t%=t%+1
		b$ = b$ + STRING$(CVI(mid$(a$,t%))+1, LEFT$(MKI$(bitswap($00))) )   
        'print CVI(mid$(a$,t%))+1,"-times:","00"	
	  Else IF CVI(mid$(a$,t%))=$E8
		b$ = b$ + STRING$(2, LEFT$(MKI$(bitswap($00))) )   
	  Else IF CVI(mid$(a$,t%))=$E9
		b$ = b$ + STRING$(3, LEFT$(MKI$(bitswap($00))) )   
	  Else IF CVI(mid$(a$,t%))=$EB
	    t%=t%+2
		b$ = b$ + STRING$(CVI(mid$(a$,t%-1))+1, LEFT$(MKI$(bitswap(CVI(mid$(a$,t%))))) )   
		'print CVI(mid$(a$,t%-1))+1,"-times:",CVI(mid$(a$,t%))
	  ELSE IF CVI(mid$(a$,t%))=$EC
	    t%=t%+1
		b$ = b$ + LEFT$(MKI$(bitswap(CVI(mid$(a$,t%)))))
		'print "1-time",CVI(mid$(a$,t%))
	  ELSE
        b$ = b$ + LEFT$(MKI$(bitswap(CVI(mid$(a$,t%)))))
		'print "just:",mid$(a$,t%)
	  ENDIF
	#  pause 0.2
    NEXT t%
	RETURN b$
  Return
ENDFUNC
PROCEDURE put_pic640(X%, Y%, wd%, pic$)
'print "will put"
	LOCAL wd%, wdX%, ht%, bt%
	'wd%=600
	wdX% = wd%
    IF mod(wd%,16)>0 
	  wdX%=wdX%+16-mod(wd%,16) !gerade anzahl von bytes?
	ENDIF
    ht%=480
  '  bt%=cvi(mid$(pic$,6)+mid$(pic$,5))
	print "wd",wd%,"wdX",wdX%,"ht",ht%
	'print str$(wd%)+"("+str$(wdX%)+")x"+str$(ht%)+"x"+str$(bt%)+"@"+str$(X%)+"x"+str$(Y%)
    'Put_Bitmap RIGHT$(pic$,LEN(pic$)-6),X%,Y%,wdX%,ht%
	Put_Bitmap RIGHT$(pic$,LEN(pic$)),X%,Y%,wdX%,ht%
RETURN
ENDFUNC
END